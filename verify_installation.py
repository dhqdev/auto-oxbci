#!/usr/bin/env python3
# verify_installation.py
# Script para verificar se tudo est√° instalado corretamente

"""
Script de verifica√ß√£o da instala√ß√£o do Sistema de Automa√ß√£o v4.0

USO:
    python verify_installation.py
"""

import sys
import os

def print_header(text):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 60)
    print(text.center(60))
    print("=" * 60)

def print_check(text, status):
    """Imprime resultado de verifica√ß√£o"""
    icon = "‚úÖ" if status else "‚ùå"
    print(f"{icon} {text}")

def verify_python():
    """Verifica vers√£o do Python"""
    print("\nüêç Verificando Python...")
    version = sys.version_info
    is_ok = version.major == 3 and version.minor >= 8
    
    print_check(f"Python {version.major}.{version.minor}.{version.micro}", is_ok)
    
    if not is_ok:
        print("   ‚ö†Ô∏è  Requer Python 3.8 ou superior")
        return False
    
    return True

def verify_dependencies():
    """Verifica depend√™ncias instaladas"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    # Depend√™ncias obrigat√≥rias
    required_dependencies = {
        'selenium': 'Selenium',
        'webdriver_manager': 'WebDriver Manager',
        'tkinter': 'Tkinter (GUI)'
    }
    
    # Depend√™ncias opcionais (para funcionalidades espec√≠ficas)
    optional_dependencies = {
        'requests': 'Requests (HTTP)',
        'bs4': 'BeautifulSoup4 (HTML parsing)'
    }
    
    all_ok = True
    
    # Verifica depend√™ncias obrigat√≥rias
    for module, name in required_dependencies.items():
        try:
            if module == 'tkinter':
                import tkinter
            else:
                __import__(module)
            print_check(name, True)
        except ImportError:
            print_check(name, False)
            all_ok = False
    
    # Verifica depend√™ncias opcionais (n√£o falha se ausentes)
    for module, name in optional_dependencies.items():
        try:
            __import__(module)
            print_check(f"{name} (opcional)", True)
        except ImportError:
            print_check(f"{name} (opcional) - ausente", False)
            print(f"   ‚ÑπÔ∏è  {name} n√£o √© obrigat√≥rio para funcionamento b√°sico")
    
    return all_ok

def verify_files():
    """Verifica arquivos essenciais"""
    print("\nüìÅ Verificando arquivos essenciais...")
    
    required_files = {
        'main_gui.py': 'Execut√°vel principal (GUI)',
        'auth/servopa_auth.py': 'M√≥dulo autentica√ß√£o Servopa',
        'auth/todoist_auth.py': 'M√≥dulo autentica√ß√£o Todoist',
        'automation/servopa_lances.py': 'M√≥dulo lances (v4.0)',
        'automation/cycle_orchestrator.py': 'Orquestrador ciclo (v4.0)',
        'utils/todoist_board_extractor.py': 'Extrator board (v4.0)',
        'ui/modern_automation_gui.py': 'Interface moderna',
        'requirements.txt': 'Lista de depend√™ncias'
    }
    
    all_ok = True
    
    for file, desc in required_files.items():
        exists = os.path.exists(file)
        print_check(f"{desc} ({file})", exists)
        if not exists:
            all_ok = False
    
    return all_ok

def verify_chrome():
    """Verifica se Chrome pode ser iniciado"""
    print("\nüåê Verificando Google Chrome...")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service as ChromeService
        from webdriver_manager.chrome import ChromeDriverManager
        
        print("   üì• Baixando/verificando ChromeDriver...")
        
        options = webdriver.ChromeOptions()
        options.add_argument("--headless=new")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        driver.get("about:blank")
        driver.quit()
        
        print_check("Chrome e ChromeDriver", True)
        return True
        
    except Exception as e:
        print_check("Chrome e ChromeDriver", False)
        print(f"   ‚ö†Ô∏è  Erro: {e}")
        return False

def verify_credentials():
    """Verifica se credenciais existem"""
    print("\nüîê Verificando credenciais...")
    
    exists = os.path.exists('credentials.json')
    print_check("Arquivo credentials.json", exists)
    
    if not exists:
        print("   ‚ÑπÔ∏è  Configure as credenciais via interface gr√°fica")
        print("   ‚ÑπÔ∏è  Execute: python main_gui.py")
        return False
    
    try:
        import json
        with open('credentials.json', 'r') as f:
            data = json.load(f)
        
        has_servopa = 'servopa' in data and data['servopa'].get('usuario') and data['servopa'].get('senha')
        has_todoist = 'todoist' in data and data['todoist'].get('usuario') and data['todoist'].get('senha')
        
        print_check("Credenciais Servopa configuradas", has_servopa)
        print_check("Credenciais Todoist configuradas", has_todoist)
        
        return has_servopa and has_todoist
        
    except Exception as e:
        print_check("Credenciais v√°lidas", False)
        print(f"   ‚ö†Ô∏è  Erro ao ler credenciais: {e}")
        return False

def verify_documentation():
    """Verifica documenta√ß√£o"""
    print("\nüìö Verificando documenta√ß√£o...")
    
    docs = {
        'README.md': 'README principal',
        'QUICKSTART.md': 'Guia r√°pido',
        'README_V4.md': 'Guia completo v4.0',
        'TECHNICAL_DOCS.md': 'Documenta√ß√£o t√©cnica',
        'SUMMARY.md': 'Resumo executivo'
    }
    
    all_ok = True
    
    for file, desc in docs.items():
        exists = os.path.exists(file)
        print_check(desc, exists)
        if not exists:
            all_ok = False
    
    return all_ok

def main():
    """Fun√ß√£o principal"""
    print_header("VERIFICA√á√ÉO DE INSTALA√á√ÉO - v4.0")
    
    print("\nüìã Este script verifica se tudo est√° instalado corretamente")
    print("   para o Sistema de Automa√ß√£o Servopa + Todoist v4.0")
    
    results = {}
    
    # Executa verifica√ß√µes
    results['Python'] = verify_python()
    results['Depend√™ncias'] = verify_dependencies()
    results['Arquivos'] = verify_files()
    results['Chrome'] = verify_chrome()
    results['Credenciais'] = verify_credentials()
    results['Documenta√ß√£o'] = verify_documentation()
    
    # Resumo final
    print_header("RESUMO DA VERIFICA√á√ÉO")
    
    all_ok = True
    for check, status in results.items():
        print_check(check, status)
        if not status:
            all_ok = False
    
    print("\n" + "=" * 60)
    
    if all_ok:
        print("‚úÖ TUDO OK! Sistema pronto para uso!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Execute: python main_gui.py")
        print("   2. Configure credenciais (se ainda n√£o fez)")
        print("   3. Clique em 'Iniciar' na aba Automa√ß√£o")
        print("\nüìö Documenta√ß√£o:")
        print("   ‚Ä¢ QUICKSTART.md - Guia r√°pido")
        print("   ‚Ä¢ README_V4.md - Guia completo")
        return 0
    else:
        print("‚ùå Alguns problemas encontrados!")
        print("\nüîß Como corrigir:")
        
        if not results['Python']:
            print("   ‚Ä¢ Instale Python 3.8 ou superior")
        
        if not results['Depend√™ncias']:
            print("   ‚Ä¢ Execute: pip install -r requirements.txt")
        
        if not results['Arquivos']:
            print("   ‚Ä¢ Baixe o projeto completo novamente")
            print("   ‚Ä¢ Certifique-se de estar no diret√≥rio correto")
        
        if not results['Chrome']:
            print("   ‚Ä¢ Instale o Google Chrome")
            print("   ‚Ä¢ Verifique conex√£o com internet")
        
        if not results['Credenciais']:
            print("   ‚Ä¢ Execute: python main_gui.py")
            print("   ‚Ä¢ V√° para aba 'Credenciais'")
            print("   ‚Ä¢ Preencha e salve as credenciais")
        
        return 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Verifica√ß√£o interrompida pelo usu√°rio")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
