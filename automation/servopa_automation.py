# automation/servopa_automation.py
# Automa√ß√£o dos processos do sistema Servopa

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# URLs do Servopa
SERVOPA_DASHBOARD_URL = "https://www.consorcioservopa.com.br/vendas/dashboard"
SERVOPA_PAINEL_URL = "https://www.consorcioservopa.com.br/vendas/painel"
SERVOPA_LANCES_URL = "https://www.consorcioservopa.com.br/vendas/lances"
TIMEOUT = 20

def navigate_to_consorcio_selection(driver, progress_callback=None):
    """
    Navega para a sele√ß√£o de cons√≥rcio
    
    Args:
        driver: Inst√¢ncia do WebDriver j√° logado
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        bool: True se bem-sucedido
    """
    try:
        if progress_callback:
            progress_callback("üè† Navegando para o dashboard...")
        
        driver.get(SERVOPA_DASHBOARD_URL)
        time.sleep(3)  # Aguarda carregamento
        
        wait = WebDriverWait(driver, TIMEOUT)
        
        if progress_callback:
            progress_callback("üîç Procurando link 'Selecionar Cons√≥rcio'...")
        
        # Procura o link de sele√ß√£o de cons√≥rcio
        selecionar_link = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//a[@href='https://www.consorcioservopa.com.br/vendas/painel' or contains(text(), 'Selecionar Cons√≥rcio')]")
        ))
        
        if progress_callback:
            progress_callback("üëÜ Clicando em 'Selecionar Cons√≥rcio'...")
        
        selecionar_link.click()
        time.sleep(3)  # Aguarda carregamento da p√°gina
        
        if progress_callback:
            progress_callback("‚úÖ Navega√ß√£o para sele√ß√£o de cons√≥rcio conclu√≠da")
        
        return True
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro na navega√ß√£o: {e}")
        driver.save_screenshot("screenshots/navigation_error.png")
        return False

def fill_grupo_and_search(driver, grupo_number, progress_callback=None):
    """
    Preenche n√∫mero do grupo e clica em buscar
    
    Args:
        driver: Inst√¢ncia do WebDriver
        grupo_number: N√∫mero do grupo extra√≠do do Todoist
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        bool: True se bem-sucedido
    """
    try:
        wait = WebDriverWait(driver, TIMEOUT)
        
        if progress_callback:
            progress_callback("üîç Localizando campo de grupo...")
        
        # Localiza o campo de grupo
        grupo_input = wait.until(EC.presence_of_element_located((By.ID, "grupofrm")))
        
        if progress_callback:
            progress_callback(f"‚úèÔ∏è Preenchendo campo com n√∫mero: {grupo_number}")
        
        # Preenche o campo com delay natural
        grupo_input.clear()
        time.sleep(0.5)
        for char in grupo_number:
            grupo_input.send_keys(char)
            time.sleep(0.1)  # Digita√ß√£o natural
        
        time.sleep(1)
        
        if progress_callback:
            progress_callback("üîç Procurando bot√£o 'Buscar'...")
        
        # Localiza e clica no bot√£o Buscar
        buscar_button = wait.until(EC.element_to_be_clickable(
            (By.ID, "btn_representante_cota")
        ))
        
        if progress_callback:
            progress_callback("üîç Clicando em 'Buscar' para localizar clientes...")
        
        buscar_button.click()
        time.sleep(4)  # Aguarda busca carregar
        
        if progress_callback:
            progress_callback("‚úÖ Busca por clientes realizada com sucesso")
        
        # Tira screenshot dos resultados
        driver.save_screenshot("screenshots/clientes_encontrados.png")
        
        return True
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro ao buscar clientes: {e}")
        driver.save_screenshot("screenshots/busca_error.png")
        return False

def select_first_client(driver, progress_callback=None):
    """
    Seleciona o primeiro cliente da lista
    
    Args:
        driver: Inst√¢ncia do WebDriver
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        str: Nome do cliente selecionado ou None se falhar
    """
    try:
        wait = WebDriverWait(driver, TIMEOUT)
        
        if progress_callback:
            progress_callback("üîç Procurando primeiro cliente na lista...")
        
        # Procura o primeiro cliente (div com classe wrap)
        first_client = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "div.wrap")
        ))
        
        # Pega o nome do cliente
        client_name = first_client.text.strip()
        
        if progress_callback:
            progress_callback(f"üë§ Cliente encontrado: {client_name}")
        
        if progress_callback:
            progress_callback("üëÜ Selecionando primeiro cliente...")
        
        # Clica no cliente
        first_client.click()
        time.sleep(3)  # Aguarda sele√ß√£o ser processada
        
        if progress_callback:
            progress_callback(f"‚úÖ Cliente '{client_name}' selecionado com sucesso")
        
        # Tira screenshot da sele√ß√£o
        driver.save_screenshot("screenshots/cliente_selecionado.png")
        
        return client_name
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro ao selecionar cliente: {e}")
        driver.save_screenshot("screenshots/selecao_cliente_error.png")
        return None

def navigate_to_lances(driver, progress_callback=None):
    """
    Navega para a p√°gina de lances
    
    Args:
        driver: Inst√¢ncia do WebDriver
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        bool: True se bem-sucedido
    """
    try:
        wait = WebDriverWait(driver, TIMEOUT)
        
        if progress_callback:
            progress_callback("üîç Procurando link de 'Lances'...")
        
        # Procura o link de lances
        lances_link = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//a[@href='https://www.consorcioservopa.com.br/vendas/lances' or contains(text(), 'Lances')]")
        ))
        
        if progress_callback:
            progress_callback("üéØ Navegando para p√°gina de lances...")
        
        lances_link.click()
        time.sleep(3)  # Aguarda carregamento
        
        if progress_callback:
            progress_callback("‚úÖ Navega√ß√£o para lances conclu√≠da")
        
        # Tira screenshot da p√°gina de lances
        driver.save_screenshot("screenshots/pagina_lances.png")
        
        return True
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro ao navegar para lances: {e}")
        driver.save_screenshot("screenshots/lances_error.png")
        return False

def complete_servopa_automation(driver, grupo_number, progress_callback=None):
    """
    Executa o processo completo de automa√ß√£o no Servopa
    
    Args:
        driver: Inst√¢ncia do WebDriver j√° logado
        grupo_number: N√∫mero do grupo do Todoist
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        dict: Resultado da automa√ß√£o com status e dados
    """
    result = {
        'success': False,
        'grupo_number': grupo_number,
        'client_name': None,
        'steps_completed': []
    }
    
    try:
        # Passo 1: Navegar para sele√ß√£o de cons√≥rcio
        if navigate_to_consorcio_selection(driver, progress_callback):
            result['steps_completed'].append('navigation')
        else:
            return result
        
        # Passo 2: Preencher e buscar
        if fill_grupo_and_search(driver, grupo_number, progress_callback):
            result['steps_completed'].append('search')
        else:
            return result
        
        # Passo 3: Selecionar primeiro cliente
        client_name = select_first_client(driver, progress_callback)
        if client_name:
            result['client_name'] = client_name
            result['steps_completed'].append('client_selection')
        else:
            return result
        
        # Passo 4: Navegar para lances
        if navigate_to_lances(driver, progress_callback):
            result['steps_completed'].append('lances_navigation')
            result['success'] = True
        
        return result
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro na automa√ß√£o completa: {e}")
        return result

if __name__ == "__main__":
    # Teste do m√≥dulo
    from auth.servopa_auth import create_driver, login_servopa
    
    driver = create_driver()
    try:
        # Faz login primeiro
        if login_servopa(driver, print):
            print("‚úÖ Login OK, testando automa√ß√£o...")
            
            # Testa automa√ß√£o completa
            result = complete_servopa_automation(driver, "1550", print)
            
            if result['success']:
                print(f"‚úÖ Automa√ß√£o completa! Cliente: {result['client_name']}")
            else:
                print("‚ùå Automa√ß√£o falhou")
                
            input("Pressione Enter para continuar...")
        else:
            print("‚ùå Falha no login")
    finally:
        driver.quit()